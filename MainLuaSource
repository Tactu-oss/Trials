local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/Tactu-oss/Trials/refs/heads/main/MainRayField'))()

local Window = Rayfield:CreateWindow({
    Name = "Legacy Hub",
    Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "Legacy Hub",
    LoadingSubtitle = "by King",
    Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "Legacy Hub"
    },
 
    Discord = {
       Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "gDKjAr4R", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
       RememberJoins = false -- Set this to false to make them join the discord every time they load it up
    },
 
    KeySystem = true, -- Set this to true to use our key system
    KeySettings = {
       Title = "Legacy Hub",
       Subtitle = "Freemium Key System",
       Note = 'Get your key by clicking the<font color="#32CD32"> "Get a Script Key" '.."</font>button! or alternatively, you can visit our discord below!", -- Use this to tell the user how to get a key
       FileName = "LegacyKey", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"https://raw.githubusercontent.com/Tactu-oss/Trials/refs/heads/main/MainKey"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })

local Tab = Window:CreateTab("Macro", "user-round-cog") -- Title, Image
local Section = Tab:CreateSection("Macro Settings")
getgenv().PlayerTV = tostring(game.Players.LocalPlayer.Name)
 local Input = Tab:CreateInput({
   Name = "Player name:",
   CurrentValue = "",
   PlaceholderText = tostring(game.Players.LocalPlayer.Name) or "Player name could not load! please input your roblox name here",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Text)
      getgenv().PlayerTV = Text

      if getgenv().PlayerTV ~= nil and game.Players:FindFirstChild(tostring(getgenv().PlayerTV)) then
         Rayfield:Notify({
            Title = "Player found!",
            Content = "You can now go and toggle camera view",
            Duration = 6,
            Image = "rewind",
         })
      else
         Rayfield:Notify({
            Title = "Player not found!",
            Content = "Make sure to write your main player name and not your nickname.",
            Duration = 6,
            Image = "rewind",
         })
      end

   end,
})

getgenv().StudsYG = 20
local Slider = Tab:CreateSlider({
   Name = "Top-Down View Slider",
   Range = {10, 50},
   Increment = 1,
   Suffix = "Height Studs",
   CurrentValue = 20,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().StudsYG = Value
   end,
})

getgenv().AnglesYG = -90
local Slider10 = Tab:CreateSlider({
   Name = "Top-Down Angles Slider",
   Range = {-90, 90},
   Increment = 10,
   Suffix = "Angle",
   CurrentValue = -90,
   Flag = "Slider10", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().AnglesYG = Value
   end,
})

getgenv().VState1 = false
local Toggle = Tab:CreateToggle({
   Name = "Toggle Camera View Top-Down",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)

      if getgenv().PlayerTV ~= nil and game.Players:FindFirstChild(tostring(getgenv().PlayerTV)) then
         print(getgenv().PlayerTV)
         local Plr = game.Players:FindFirstChild(tostring(getgenv().PlayerTV))
         local Char = Plr.Character
         local Primary = Char:WaitForChild("HumanoidRootPart")
         
         local Cam = workspace.CurrentCamera
         local StudsY = 20

         local function Enable()
            Cam.CameraType = Enum.CameraType.Scriptable
            getgenv().VState1 = true
            game["Run Service"].RenderStepped:Connect(function()
               if getgenv().VState1 == false then
                  return
               end
               if getgenv().StudsYG ~= nil then
                  Cam.CFrame = CFrame.new(Primary.Position.X,tonumber(getgenv().StudsYG),Primary.Position.Z) * CFrame.Angles(math.rad(getgenv().AnglesYG),0,0)
               else
                  Cam.CFrame = CFrame.new(Primary.Position.X,StudsY,Primary.Position.Z) * CFrame.Angles(math.rad(-90),0,0)
               end
            end)
         end

         local function Disable()
            getgenv().VState1 = false
            Cam.CameraType = Enum.CameraType.Custom
         end

         if Value == true then
            Enable()
         else
            Disable()
         end

      else
         if Value == false then
            return
         end

         Rayfield:Notify({
            Title = "Player not found!",
            Content = "Make sure to write your main player name and not your nickname.",
            Duration = 6,
            Image = "rewind",
         })
      end
   end,
})

getgenv().SMap = nil
local Dropdown = Tab:CreateDropdown({
   Name = "Select Map",
   Options = {"HallowManor","Doodle","IsleOfBalls","MountainsMap","TheHallows","HoloMap","ForestMap","GoldenCastle","Tundra","Railroad"},
   CurrentOption = {"Select an option!"},
   MultipleOptions = false,
   Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
      getgenv().SMap = Options[1]
      Rayfield:Notify({
         Title = "Map Selected!",
         Content = "Selected Map: "..Options[1],
         Duration = 4,
         Image = "rewind",
      })
   end,
})

local tableMaps = {
	HallowManor = Vector3.new(-670.2698974609375, 3.6999990940093994, -10.703489303588867),
	Doodle = Vector3.new(1328.9097900390625, 15.200156211853027, -3252.9169921875),
	IsleOfBalls = Vector3.new(-101.30972290039062, 4.168971538543701, -1835.23974609375),
	MountainsMap = Vector3.new(726.5659790039062, 3.7000067234039307, -3275.414794921875),
	TheHallows = Vector3.new(-720.5363159179688, 20.699996948242188, -3385.430908203125),
	HoloMap = Vector3.new(721.126220703125, 193.6361846923828, -4692.01513671875),
	ForestMap = Vector3.new(254.61441040039062, 8.699997901916504, -3853.20556640625),
	GoldenCastle = Vector3.new(2489.35400390625, 126.69696044921875, -3252.39794921875),
	Tundra = Vector3.new(-1393.7779541015625, 5.69999885559082, 1227.9234619140625),
	Railroad = Vector3.new(-1727.5205078125, 60.61420822143555, -2721.731201171875)
}

getgenv().VState2 = false
local Toggle2 = Tab:CreateToggle({
   Name = "Toggle Teleport-Location(CFrame)",
   CurrentValue = false,
   Flag = "Toggle2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      if getgenv().SMap == nil then
         if Value == false then
            return
         end
         Rayfield:Notify({
            Title = "Map not Selected!",
            Content = "Be sure to select a map before toggling.",
            Duration = 6,
            Image = "rewind",
         })
         return
      end

      if getgenv().VState2 == false then
         getgenv().VState2 = true
      else
         getgenv().VState2 = false
         return
      end

      if getgenv().PlayerTV ~= nil and game.Players:FindFirstChild(tostring(getgenv().PlayerTV)) then
         getgenv().VState2 = true
         while getgenv().VState2 == true do
            local lookPosition = Vector3.new(90, 0, 0) 
            game.Players:FindFirstChild(tostring(getgenv().PlayerTV)).Character.HumanoidRootPart.CFrame = CFrame.new(tableMaps[getgenv().SMap], lookPosition)
            task.wait(1)
         end
      else
         if Value == false then
            return
         end
         Rayfield:Notify({
            Title = "Player not found!",
            Content = "Make sure to write your main player name and not your nickname.",
            Duration = 6,
            Image = "rewind",
         })
      end

   end,
})

local Section = Tab:CreateSection("Note")
local Button = Tab:CreateButton({
   Name = "Press to copy Discord Server invite to clipboard",
   Callback = function()
		local copy = "https://discord.gg/gDKjAr4R"
		setclipboard(tostring(copy))
   end,
})
local Paragraph = Tab:CreateParagraph({Title = "Regarding Units/Other:", Content = "We are currently working on finding a solution to decompile the buffering system that the devs have put in our way. Until then, you may need to use the help of TinyTask/RepetiTouch Pro to place down units and upgrade them! If you find any bugs or have any suggestions on what to add next, join our Discord by pressing the button above!"})

-- End

local Tab2 = Window:CreateTab("Misc", "folder-cog")
local Section = Tab2:CreateSection("Misc Settings")

getgenv().VState3 = false
local Toggle3 = Tab2:CreateToggle({
    Name = "Auto-Restart",
    CurrentValue = false,
    Flag = "Toggle3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        getgenv().VState3 = Value
        if getgenv().VState3 == true then
            while getgenv().VState3 == true do
                task.wait(1)
                 if  game:GetService("ReplicatedStorage").Remotes:FindFirstChild("VoteRestart") then
                  if game:GetService("Players").LocalPlayer.PlayerGui.MainGui:FindFirstChild("Retry") then
                     if game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Retry.Visible == true then
                        game:GetService("ReplicatedStorage").Remotes.VoteRestart:FireServer()
                     end
                  end
                end
            end
        else
            return
        end
    end,
 })

 getgenv().VState7 = false
 local Toggle3 = Tab2:CreateToggle({
     Name = "Auto-TurkeyCrate",
     CurrentValue = false,
     Flag = "Toggle7", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
     Callback = function(Value)
         getgenv().VState7 = Value
         if getgenv().VState7 == true then
             while getgenv().VState7 == true do
                 task.wait(1)
                
                 if game.Workspace:FindFirstChild("T0") ~= nil then
                    repeat
                        if game.Workspace:FindFirstChild("T0") == nil then break end
                        game.Workspace.T0.Root.Anchored = true
                        task.wait(0.25)
                        if game.Workspace:FindFirstChild("T0") == nil then break end
                        game.Workspace.T0.Root.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(2,1,2)
                        task.wait(4)
                        if game.Workspace:FindFirstChild("T0") == nil then break end
                        game.Workspace.T0.Root.Anchored = false
                        task.wait(0.25)
                        if game.Workspace:FindFirstChild("T0") == nil then break end
                        game.Workspace.T0.Root.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(10,1,10)
                        task.wait(1)
                    until game.Workspace:FindFirstChild("T0") == nil
                    break
                end

             end
         else
             return
         end
     end,
  })

getgenv().DMap = nil
 local Dropdown = Tab2:CreateDropdown({
    Name = "Select Difficulty",
    Options = {"Easy","Medium","Hard","Expert","BossRushOne"},
    CurrentOption = {"Select an option!"},
    MultipleOptions = false,
    Flag = "Dropdown2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Options)
        getgenv().DMap = Options[1]
        Rayfield:Notify({
            Title = "Difficulty Selected!",
            Content = "Selected Difficulty: "..Options[1],
            Duration = 4,
            Image = "rewind",
        })
    end,
 })

 getgenv().VState4 = false
local Toggle4 = Tab2:CreateToggle({
    Name = "Auto-Difficulty",
    CurrentValue = false,
    Flag = "Toggle4", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        getgenv().VState4 = Value
        if getgenv().VState4 == true then
            
            if getgenv().DMap ~= nil then
                while getgenv().VState4 == true do
                    task.wait(1)
                    if game:GetService("ReplicatedStorage").Remotes:FindFirstChild("VoteDifficulty") then
                        if game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Difficulty.Visible == true then
                            local ohString1 = tostring(getgenv().DMap)
                            game:GetService("ReplicatedStorage").Remotes.VoteDifficulty:FireServer(ohString1)
                        end
                    end
                end
            else
                Rayfield:Notify({
                    Title = "Warning!",
                    Content = "You need to select a Difficulty first!",
                    Duration = 4,
                    Image = "rewind",
                })
            end

        else
            return
        end
    end,
 })

 getgenv().SSpeed = 1
 local Slider = Tab2:CreateSlider({
    Name = "Speed Modifier",
    Range = {0, 4},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 1,
    Flag = "Slider2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        getgenv().SSpeed = Value
    end,
 })

 getgenv().VState5 = false
local Toggle5 = Tab2:CreateToggle({
    Name = "Auto-Speed",
    CurrentValue = false,
    Flag = "Toggle5", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        getgenv().VState5 = Value
        if getgenv().VState5 == true then
            
            if getgenv().SSpeed ~= nil then
                while getgenv().VState5 == true do
                    task.wait(1)
                    if game:GetService("ReplicatedStorage").Remotes:FindFirstChild("SetSpeedUp") then
                        local ohNumber1 = tonumber(getgenv().SSpeed)
                        game:GetService("ReplicatedStorage").Remotes.SetSpeedUp:FireServer(ohNumber1)
                    end
                end
            else
                Rayfield:Notify({
                    Title = "Warning!",
                    Content = "You need to select a Speed first!",
                    Duration = 4,
                    Image = "rewind",
                })
            end

        else
            return
        end
    end,
 })

 getgenv().VState6 = false
 local Toggle6 = Tab2:CreateToggle({
     Name = "Auto-Skip",
     CurrentValue = false,
     Flag = "Toggle6", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
     Callback = function(Value)
         getgenv().VState6 = Value
         if getgenv().VState6 == true then
             
            while getgenv().VState6 == true do
                task.wait(1)
                if game:GetService("ReplicatedStorage").Remotes:FindFirstChild("SkipVote") then
                    game:GetService("ReplicatedStorage").Remotes.SkipVote:FireServer()
                end
            end
 
         else
             return
         end
     end,
  })

local Section = Tab2:CreateSection("Extra")
local Button = Tab2:CreateButton({
   Name = "Lobby",
   Callback = function()
      if game:GetService("ReplicatedStorage").Remotes:FindFirstChild("ReturnToLobby") then
         game:GetService("ReplicatedStorage").Remotes.ReturnToLobby:FireServer()
     end
   end,
})

local Button = Tab2:CreateButton({
   Name = "Destroy Interface",
   Callback = function()

      getgenv().VState1 = false
      getgenv().VState2 = false
      getgenv().VState3 = false
      getgenv().VState4 = false
      getgenv().VState5 = false
      getgenv().VState6 = false
      getgenv().VState7 = false

      Cam.CameraType = Enum.CameraType.Custom
      Rayfield:Destroy()
   end,
})
local Paragraph = Tab2:CreateParagraph({Title = "Warning!", Content = "Destroying the interface will turn off all toggles."})

-- End

local Tab3 = Window:CreateTab("Themes", "palette")

local Section = Tab3:CreateSection("Themes Settings")
local Button = Tab3:CreateButton({
    Name = "Default",
    Callback = function()
        Window.ModifyTheme('Default')
    end,
 })
 local Button = Tab3:CreateButton({
    Name = "Amber Glow",
    Callback = function()
        Window.ModifyTheme('AmberGlow')
    end,
 })
 local Button = Tab3:CreateButton({
    Name = "Amethyst",
    Callback = function()
        Window.ModifyTheme('Amethyst')
    end,
 })
 local Button = Tab3:CreateButton({
    Name = "Bloom",
    Callback = function()
        Window.ModifyTheme('Bloom')
    end,
 })
 local Button = Tab3:CreateButton({
    Name = "Dark Blue",
    Callback = function()
        Window.ModifyTheme('DarkBlue')
    end,
 })
 local Button = Tab3:CreateButton({
    Name = "Green",
    Callback = function()
        Window.ModifyTheme('Green')
    end,
 })
 local Button = Tab3:CreateButton({
    Name = "Light",
    Callback = function()
        Window.ModifyTheme('Light')
    end,
 })
 local Button = Tab3:CreateButton({
    Name = "Ocean",
    Callback = function()
        Window.ModifyTheme('Ocean')
    end,
 })
 local Button = Tab3:CreateButton({
    Name = "Serenity",
    Callback = function()
        Window.ModifyTheme('Serenity')
    end,
 })

 -- End
