--[[ To:do
    1.Check for set:new settings
    2.Button to open and Close the Ui.
    3.Premium Window Key System : Button to open it, in settings at info down. Name Button: Activate Premium

    Main txt. : LegacyHub
    Premium txt. : PremiumKeys

    For Main = Window Key System (To put key the loadstring)
    For Premium = Info>Button>Press = Small Window Key System (To put key the loadstring)

    Inside Main: Check for Lrm_Seconds for Main then expired = kick
    Inside Premium: Check for Lrm_Seconds for Premium then expired = kick
]]

--Check
if getgenv().LegacyHubWindow ~= nil then
    if getgenv().LegacyHubWindow == true then
        warn("LegacyHub Is Already Opened")
        return
    end
end

--LegacyHub Library
local library = loadstring(game:HttpGet('https://raw.githubusercontent.com/Tactu-oss/Pepsi-s_UI_Custom/refs/heads/main/Pepsi_v11'))()
local Wait = library.subs.Wait -- Only returns if the GUI has not been terminated. For 'while Wait() do' loops

--Getting the GUI
if game:GetService("CoreGui")["     "] ~= nil then
    local GuiMain = game:GetService("CoreGui")["     "]
    print("Yes")
end
print(GuiMain)

--global values
getgenv().Crate_Buy_Selected = "Banner"
getgenv().Crate_Open_Selected = "Banner"
getgenv().Crate_Buy = false
getgenv().Crate_Open = false

--local values
local Crate_Buy_Delay = 0.5
local Crate_Open_Delay = 0.5

--premium values
local IsPremium = false

--debounce values
local CrateOpenedAddInventory = 0
local db1 = false
local db2 = false

--tables 
local CrateValues = {
    Banner = {Cost = 750, Type = "Coins"},
    UltaBanner = {Cost = 100, Type = "Gems"},
    Monkey = {Cost = 7500, Type = "Coins"},
    Illegal = {Cost = 750, Type = "Coins"},
    Starter = {Cost = 500, Type = "Coins"},
    SuperIllegal = {Cost = 3750, Type = "Coins"},
}

--LegacyHub Window
getgenv().LegacyHubWindow = true
local LegacyHub = library:CreateWindow({
    Name = "Legacy Hub",
    Themeable = {
        Info = "Discord Server: 6g6xA24nn5"
    }
 })

--LegacyHub Tabs
local GeneralTab = LegacyHub:CreateTab({
    Name = "Lobby"
})

--LegacyHub Sections
local FarmingSection_Select = GeneralTab:CreateSection({
    Name = "Select Crate",
    Side = "left" -- "left" or "right"
})
local FarmingSection_Delay = GeneralTab:CreateSection({
    Name = "Crate Delay",
    Side = "left" -- "left" or "right"
})
local FarmingSection_Crate = GeneralTab:CreateSection({
    Name = "Auto Crate",
    Side = "left" -- "left" or "right"
})

--LegacyHub Section:1.1
FarmingSection_Select:AddDropdown({
    Name = "Select Crate To Buy:",
    List = {"Banner","Starter","Monkey","UltaBanner","Illegal","SuperIllegal"},
    Flag = "BoardControlSection_Crate_Select_Buy",
    Callback = function(Option)
        getgenv().Crate_Buy_Selected = Option
    end
})

FarmingSection_Select:AddDropdown({
    Name = "Select Crate To Open:",
    List = {"Banner","Starter","Monkey","UltaBanner","Illegal","SuperIllegal","Baller","Rock","Forest","Frozen","Doodle","Turkey","Royal"},
    Flag = "BoardControlSection_Crate_Select_Open",
    Callback = function(Option)
        getgenv().Crate_Open_Selected = Option
    end
})

--LegacyHub Section:2.1
FarmingSection_Delay:AddSlider({
    Name = "Buy Delay: %s/s",
    Flag = "BoardControlSection_Crate_Buy_Delay",
    Value = 0.5,
	Min = 0.1,
	Max = 1,
    Format = "Buy Delay: %s/s",
    Textbox = true,
    Callback = function(NewValue)
        Crate_Buy_Delay = NewValue
    end
})

FarmingSection_Delay:AddSlider({
    Name = "Open Delay: %s/s",
    Flag = "BoardControlSection_Crate_Open_Delay",
    Value = 0.5,
	Min = 0.1,
	Max = 1,
    Format = "Open Delay: %s/s",
    Textbox = true,
    Callback = function(NewValue)
        Crate_Open_Delay = NewValue
    end
})

--LegacyHub Section:3.1
FarmingSection_Crate:AddToggle({
    Name = "Buy Crate",
    Value = false,
    Flag = "BoardControlSection_Crate_Buy",
    Callback = function(NewValue)
        getgenv().Crate_Buy = NewValue
    end
})

FarmingSection_Crate:AddToggle({
    Name = "Open Crate",
    Value = false,
    Flag = "BoardControlSection_Crate_Open",
    Callback = function(NewValue)
        getgenv().Crate_Open = NewValue
    end
})



--Functions
while Wait(0.1) do
    --CrateBuy
    task.delay(0, function()
        if getgenv().Crate_Buy ~= nil then
            if getgenv().Crate_Buy == true then
                if db1 == true then return end
                db1 = true
                task.wait(Crate_Buy_Delay)
                db1 = false
                --Buy Crate
                if getgenv().Crate_Buy == true then
                    local fm = require(game:GetService("ReplicatedStorage").Modules.Fusion)
                    local sm = require(game:GetService("ReplicatedStorage").Client.UI.State)
                    local rem = require(game:GetService("ReplicatedStorage").Modules.RemoteEvents)

                    local crate = tostring(Crate_Buy_Selected)
                    local buyCrate = rem["BuyCrate"]
                    local howMany = 1
                    
                    local InventorySize = sm["ItemizedInventory"]
                    local TableInv = fm.peek(InventorySize)
                    
                    local MaxItems = 0
                    for i,v in TableInv do
                        local PeekItemsId = fm.peek(v.itemIds)
                        MaxItems += #PeekItemsId
                    end

                    local HowManyToAdd = 0
                    local PathCrates = workspace.Camera:GetChildren()
                    for i,v in PathCrates do
                        if v.Name == "DisplayCrate" then
                            HowManyToAdd += 1
                        end
                    end

                    local CalculateInvValue = tonumber(MaxItems) + tonumber(HowManyToAdd)
                    if CalculateInvValue < 1000 then
                        if CrateValues[tostring(Crate_Buy_Selected)]["Type"] == "Gems" then
                            if tonumber(game:GetService("Players").LocalPlayer.leaderstats.Gems.Value) >= tonumber(CrateValues[tostring(Crate_Buy_Selected)]["Cost"]) then
                                buyCrate.ToServer(buyCrate,crate,howMany)
                            end
                        else
                            if tonumber(game:GetService("Players").LocalPlayer.leaderstats.Coins.Value) >= tonumber(CrateValues[tostring(Crate_Buy_Selected)]["Cost"]) then
                                buyCrate.ToServer(buyCrate,crate,howMany)
                            end
                        end
                    end        
                end
            end
        end
    end)

    --CrateOpen
    task.delay(0, function()
        if getgenv().Crate_Open ~= nil then
            if getgenv().Crate_Open == true then
                if db2 == true then return end
                db2 = true
                task.wait(Crate_Buy_Delay)
                db2 = false
                --Open Crate
                if getgenv().Crate_Open == true then
                    local fm = require(game:GetService("ReplicatedStorage").Modules.Fusion)
                    local sm = require(game:GetService("ReplicatedStorage").Client.UI.State)
                    local rem = require(game:GetService("ReplicatedStorage").Modules.RemoteEvents)
                    
                    local crate = tostring(Crate_Open_Selected)
                    local usecrate = rem["UseCrate"]
                    
                    local inv = sm["Inventory"]
                    local invTbl = fm.peek(inv)
                    local crates = {}
                    for i,v in invTbl do
                        local vtbl = fm.peek(v)
                        if vtbl.type == "Crate" then

                            table.insert(crates,v)
                        end
                    end
                    for i,v in crates do
                        local v = fm.peek(v)
                        if v.kind == crate then
                            usecrate.ToServer(usecrate,v.id)
                            break
                        end
                    end

                end
            end
        end
    end)


end

--KeyCheck
while Wait(1) do
    task.delay(0, function()
        if tonumber(LRM_SecondsLeft) ~= nil then
            local SecondsLeft = tonumber(LRM_SecondsLeft)
            print("Time left until key expires: "..SecondsLeft)
            while true do
                task.wait(1)
                SecondsLeft -= 1
                    if tonumber(SecondsLeft) <= 0 then
                        plrGame:Kick("Key Expired!")
                    return
                end
            end
        end
    end)
end
